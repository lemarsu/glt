#!/usr/bin/env ruby
#

require 'rubygems'
require 'simple-rss'
require 'yaml'
require 'logger'
require 'open-uri'

class TorrentFormatter
  class DownloadError < StandardError; end
  def initialize(feed_entry, feed_conf = {})
    @feed_entry = feed_entry
    @feed_conf = feed_conf
  end

  def title
    @feed_entry.title.gsub /[^\w-]+/, '_'
  end

  def file_name
    "#{title}.torrent"
  end

  def url
    @feed_entry.link
  end

  def excluded?
    return false if @feed_conf['exclude'].nil?
    Array(@feed_conf['exclude']).map {|re| Regexp.new(re)}.any? {|re| re.match(title)}
  end

  def download
    download_to(url, full_path)
  end

  def dir_path
    $conf['global'] && $conf['global']['download_to'] || '.'
  end

  def full_path
    File.join(dir_path, file_name)
  end

  private

  def download_to(url, path, force = false)
    if File.exists?(path) && !force
      raise DownloadError.new "File exists (force off)"
    end
    File.open(path, "wb") do |f|
      open(url) do |u|
        buffer = ""
        until (size = u.read buffer, 1024).zero?
          f.write buffer, size
        end
      end
    end
  rescue OpenURI::HTTPError, SystemCallError => x
    raise DownloadError.new x.message
  end
end

CONF_PATH = [ENV['GLT_CONF_PATH'], 'glt.conf', "~/.glt.conf", "/etc/glt.conf"].reject do |path|
  path.to_s.empty?
end.map {|path| File.expand_path path}.find do |conf_path|
  File.exists?(File.expand_path(conf_path.to_s))
end

unless CONF_PATH
  STDERR.puts "Can't find configuration path. aborting"
  exit 2
end

$conf = YAML.load_file(CONF_PATH)

$logger = Logger.new($conf['global'] && $conf['global']['log_file'] || STDERR)

$logger.info "Starting"
$conf["feeds"].each do |feed_conf|
  begin
    $logger.info "Searching #{feed_conf["name"]}..."

    # FIXME Catch posibles exceptions
    feed = open feed_conf["url"] {|f| SimpleRSS.parse f}

    unless feed
      $logger.debug "Can't connect, will try again later"
      next
    end

    feed.items.each do |entry|
      tf = TorrentFormatter.new entry, feed_conf
      if tf.excluded?
        $logger.info %[Skipping file "#{tf.file_name}: Excluded by pattern."]
        next
      end

      begin
        tf.download
      rescue TorrentFormatter::DownloadError => x
        $logger.warn %[Couldn't download "#{tf.url}" into "#{tf.full_path}": #{x}]
      else
        $logger.info %[Downloaded "#{tf.url}" into "#{tf.full_path}"]
      end
    end
  ensure
    $logger.info "Finished #{feed_conf["name"]}"
  end
end
$logger.info "Exiting"
