#!/usr/bin/env ruby
#

require 'rubygems'
require 'feedzirra'
require 'yaml'
require 'logger'

class TorrentFormatter
  def initialize(feed_entry)
    @feed_entry = feed_entry
  end

  def title
    @feed_entry.title.gsub /[^\w-]+/, '_'
  end

  def file_name
    "#{title}.torrent"
  end

  def url
    @feed_entry.url
  end

  def excluded?
    title =~ /720p/
  end

  def download
    download_to(url, full_path)
  end

  def dir_path
    $conf['global'] && $conf['global']['download_to'] || '.'
  end

  def full_path
    File.join(dir_path, file_name)
  end

  private

  def download_to(url, path, force = false)
    return if File.exists?(path) && !force
    system 'wget', '-q', url, '-O', path
  end
end

CONF_PATH = [ENV['GLT_CONF_PATH'], 'glt.conf', "~/.glt.conf", "/etc/glt.conf"].reject do |path|
  path.to_s.empty?
end.map {|path| File.expand_path path}.find do |conf_path|
  File.exists?(File.expand_path(conf_path.to_s))
end

unless CONF_PATH
  STDERR.puts "Can't find configuration path. aborting"
  exit 2
end

$conf = YAML.load_file(CONF_PATH)

$logger = Logger.new($conf['global'] && $conf['global']['log_file'] || STDERR)

feed_url = $conf["feeds"].first["url"]

feed = Feedzirra::Feed.fetch_and_parse feed_url

# FIXME Should put the right condition
if feed.is_a? Integer
  $logger.debug "Can't connect, will try again later"
  exit 0
end

$logger.info "Starting"

feed.entries.each do |entry|
  tf = TorrentFormatter.new entry
  if tf.excluded?
    $logger.info %[Skipping file "#{tf.file_name}"]
  else
    $logger.info %[Downloading "#{tf.url}" into "#{tf.full_path}"]
    tf.download
  end
end
$logger.info "Exiting"
